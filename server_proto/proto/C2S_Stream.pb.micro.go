// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: C2S_Stream.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for C2S_Router service

type C2S_RouterService interface {
	AuthClient(ctx context.Context, opts ...client.CallOption) (C2S_Router_AuthClientService, error)
}

type c2S_RouterService struct {
	c    client.Client
	name string
}

func NewC2S_RouterService(name string, c client.Client) C2S_RouterService {
	return &c2S_RouterService{
		c:    c,
		name: name,
	}
}

func (c *c2S_RouterService) AuthClient(ctx context.Context, opts ...client.CallOption) (C2S_Router_AuthClientService, error) {
	req := c.c.NewRequest(c.name, "C2S_Router.AuthClient", &C2S_RouterRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &c2S_RouterServiceAuthClient{stream}, nil
}

type C2S_Router_AuthClientService interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*C2S_RouterRequest) error
	Recv() (*S2C_RouterRespone, error)
}

type c2S_RouterServiceAuthClient struct {
	stream client.Stream
}

func (x *c2S_RouterServiceAuthClient) Close() error {
	return x.stream.Close()
}

func (x *c2S_RouterServiceAuthClient) Context() context.Context {
	return x.stream.Context()
}

func (x *c2S_RouterServiceAuthClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *c2S_RouterServiceAuthClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *c2S_RouterServiceAuthClient) Send(m *C2S_RouterRequest) error {
	return x.stream.Send(m)
}

func (x *c2S_RouterServiceAuthClient) Recv() (*S2C_RouterRespone, error) {
	m := new(S2C_RouterRespone)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for C2S_Router service

type C2S_RouterHandler interface {
	AuthClient(context.Context, C2S_Router_AuthClientStream) error
}

func RegisterC2S_RouterHandler(s server.Server, hdlr C2S_RouterHandler, opts ...server.HandlerOption) error {
	type c2S_Router interface {
		AuthClient(ctx context.Context, stream server.Stream) error
	}
	type C2S_Router struct {
		c2S_Router
	}
	h := &c2S_RouterHandler{hdlr}
	return s.Handle(s.NewHandler(&C2S_Router{h}, opts...))
}

type c2S_RouterHandler struct {
	C2S_RouterHandler
}

func (h *c2S_RouterHandler) AuthClient(ctx context.Context, stream server.Stream) error {
	return h.C2S_RouterHandler.AuthClient(ctx, &c2S_RouterAuthClientStream{stream})
}

type C2S_Router_AuthClientStream interface {
	Context() context.Context
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*S2C_RouterRespone) error
	Recv() (*C2S_RouterRequest, error)
}

type c2S_RouterAuthClientStream struct {
	stream server.Stream
}

func (x *c2S_RouterAuthClientStream) Close() error {
	return x.stream.Close()
}

func (x *c2S_RouterAuthClientStream) Context() context.Context {
	return x.stream.Context()
}

func (x *c2S_RouterAuthClientStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *c2S_RouterAuthClientStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *c2S_RouterAuthClientStream) Send(m *S2C_RouterRespone) error {
	return x.stream.Send(m)
}

func (x *c2S_RouterAuthClientStream) Recv() (*C2S_RouterRequest, error) {
	m := new(C2S_RouterRequest)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
